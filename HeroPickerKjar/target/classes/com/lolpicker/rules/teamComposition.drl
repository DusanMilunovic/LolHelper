package com.lolpicker.rules;

import com.lolpicker.model.ChampionPick;
import com.lolpicker.model.ChampionSelect;
import com.lolpicker.model.Champion;
import com.lolpicker.model.Clasz;
import com.lolpicker.model.StrongPoint;
import com.lolpicker.model.CompositionType;
import com.lolpicker.model.StrongPoint;
import com.lolpicker.model.CompositionStrongPoint;
import java.util.List;


rule "enemy team, adheavy composition"
	no-loop
	when
		$a: Number(this >= 3) from accumulate 
		($cp: ChampionPick(myTeam == false, Clasz.adcarry memberOf classes), count($cp))
		$cs: ChampionSelect(enemyTeamComposition not contains CompositionType.adheavy)
	then
		$cs.getEnemyTeamComposition().add(CompositionType.adheavy);
		update($cs);
end
	
rule "my team, adheavy composition"
	no-loop
	when
		$a: Number(this >= 3) from accumulate 
		($cp: ChampionPick(myTeam == true, Clasz.adcarry memberOf classes), count($cp))
		$cs: ChampionSelect(myTeamComposition not contains CompositionType.adheavy)
	then
		$cs.getMyTeamComposition().add(CompositionType.adheavy);
		update($cs);
end

rule "enemy team, apheavy composition"
	no-loop
	when
		$a: Number(this >= 3) from accumulate 
		($cp: ChampionPick(myTeam == false, Clasz.apcarry memberOf classes), count($cp))
		$cs: ChampionSelect(enemyTeamComposition not contains CompositionType.apheavy)
	then
		$cs.getEnemyTeamComposition().add(CompositionType.apheavy);
		update($cs);
end
	
rule "my team, apheavy composition"
	no-loop
	when
		$a: Number(this >= 3) from accumulate 
		($cp: ChampionPick(myTeam == true, Clasz.apcarry memberOf classes), count($cp))
		$cs: ChampionSelect(myTeamComposition not contains CompositionType.apheavy)
	then
		$cs.getMyTeamComposition().add(CompositionType.apheavy);
		update($cs);
end

rule "enemy team, tankheavy composition"
	no-loop
	when
		$a: Number(this >= 2) from accumulate 
		($cp: ChampionPick(myTeam == false, Clasz.tank memberOf classes), count($cp))
		$cs: ChampionSelect(enemyTeamComposition not contains CompositionType.tankheavy)
	then
		$cs.getEnemyTeamComposition().add(CompositionType.tankheavy);
		update($cs);
end
	
rule "my team, tankheavy composition"
	no-loop
	when
		$a: Number(this >= 2) from accumulate 
		($cp: ChampionPick(myTeam == true, Clasz.tank memberOf classes), count($cp))
		$cs: ChampionSelect(myTeamComposition not contains CompositionType.tankheavy)
	then
		$cs.getMyTeamComposition().add(CompositionType.tankheavy);
		update($cs);
end

rule "enemy team, healerheavy composition"
	no-loop
	when
		$a: Number(this >= 2) from accumulate 
		($cp: ChampionPick(myTeam == false, Clasz.healer memberOf classes), count($cp))
		$cs: ChampionSelect(enemyTeamComposition not contains CompositionType.healerheavy)
	then
		$cs.getEnemyTeamComposition().add(CompositionType.healerheavy);
		update($cs);
end
	
rule "my team, healerheavy composition"
	no-loop
	when
		$a: Number(this >= 2) from accumulate 
		($cp: ChampionPick(myTeam == true, Clasz.healer memberOf classes), count($cp))
		$cs: ChampionSelect(myTeamComposition not contains CompositionType.healerheavy)
	then
		$cs.getMyTeamComposition().add(CompositionType.healerheavy);
		update($cs);
end

rule "enemy team, pokeheavy composition"
	no-loop
	when
		$a: Number(this >= 2) from accumulate 
		($cp: ChampionPick(myTeam == false, Clasz.poke memberOf classes), count($cp))
		$cs: ChampionSelect(enemyTeamComposition not contains CompositionType.pokeheavy)
	then
		$cs.getEnemyTeamComposition().add(CompositionType.pokeheavy);
		update($cs);
end
	
rule "my team, pokeheavy composition"
	no-loop
	when
		$a: Number(this >= 2) from accumulate 
		($cp: ChampionPick(myTeam == true, Clasz.poke memberOf classes), count($cp))
		$cs: ChampionSelect(myTeamComposition not contains CompositionType.pokeheavy)
	then
		$cs.getMyTeamComposition().add(CompositionType.pokeheavy);
		update($cs);
end

query getClasses(List $var, Boolean $myTeam)
	$var:= List(size > 0) from accumulate(
		$cp: ChampionPick($classes: classes, myTeam == $myTeam)
		and
		$class: Clasz() from $classes,
		collectList($class)
	)
end

query countClasses(List $allClasses, Clasz $class, Number $count)
	$count:= Number(this >= $count) from accumulate(
		$found: Clasz(this == $class) from $allClasses,
		count($found)
	)
end

rule "enemy team, funnel composition"
	no-loop
	salience 19
	when
		$cs: ChampionSelect(enemyTeamComposition not contains CompositionType.funnel)
		getClasses($classes1, false;)
		countClasses($classes1, Clasz.adcarry, 1;)
		countClasses($classes1, Clasz.healer, 2;)
	then
		$cs.getEnemyTeamComposition().add(CompositionType.funnel);
		update($cs);
end

rule "my team, funnel composition"
	no-loop
	salience 19
	when
		$cs: ChampionSelect(myTeamComposition not contains CompositionType.funnel)
		getClasses($classes2, true;)
		countClasses($classes2, Clasz.adcarry, 1;)
		countClasses($classes2, Clasz.healer, 2;)
	then
		$cs.getMyTeamComposition().add(CompositionType.funnel);
		update($cs);
end

rule "enemy team, early game composition"
	no-loop
	agenda-group "end"
	salience 2
	when
		$a: Number(this >= 3) from accumulate 
		($cp: ChampionPick(myTeam == false, strongPoint == StrongPoint.early), count($cp))
		$cs: ChampionSelect()
	then
		$cs.setEnemyTeamStrongPoint(CompositionStrongPoint.earlygame);
		update($cs);
end

rule "my team, early game composition"
	no-loop
	agenda-group "end"
	salience 2
	when
		$a: Number(this >= 3) from accumulate 
		($cp: ChampionPick(myTeam == true, strongPoint == StrongPoint.early), count($cp))
		$cs: ChampionSelect()
	then
		$cs.setMyTeamStrongPoint(CompositionStrongPoint.earlygame);
		update($cs);
end

rule "enemy team, mid game composition"
	no-loop
	agenda-group "end"
	salience 2
	when
		$a: Number(this >= 3) from accumulate 
		($cp: ChampionPick(myTeam == false, strongPoint == StrongPoint.mid), count($cp))
		$cs: ChampionSelect()
	then
		$cs.setEnemyTeamStrongPoint(CompositionStrongPoint.midgame);
		update($cs);
end

rule "my team, mid game composition"
	no-loop
	agenda-group "end"
	salience 2
	when
		$a: Number(this >= 3) from accumulate 
		($cp: ChampionPick(myTeam == true, strongPoint == StrongPoint.mid), count($cp))
		$cs: ChampionSelect()
	then
		$cs.setMyTeamStrongPoint(CompositionStrongPoint.midgame);
		update($cs);
end

rule "enemy team, late game composition"
	no-loop
	agenda-group "end"
	salience 2
	when
		$a: Number(this >= 3) from accumulate 
		($cp: ChampionPick(myTeam == false, strongPoint == StrongPoint.late), count($cp))
		$cs: ChampionSelect()
	then
		$cs.setEnemyTeamStrongPoint(CompositionStrongPoint.lategame);
		update($cs);
end

rule "my team, late game composition"
	no-loop
	agenda-group "end"
	salience 2
	when
		$a: Number(this >= 3) from accumulate 
		($cp: ChampionPick(myTeam == true, strongPoint == StrongPoint.late), count($cp))
		$cs: ChampionSelect()
	then
		$cs.setMyTeamStrongPoint(CompositionStrongPoint.lategame);
		update($cs);
end
